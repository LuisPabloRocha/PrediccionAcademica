import { Component, OnInit } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { LoginService } from 'src/app/services/login.service';
import { PredictionService } from 'src/app/services/prediction.service';

//ICONOS 
import { faTools } from '@fortawesome/free-solid-svg-icons';
import { faQuestion } from '@fortawesome/free-solid-svg-icons';
import { faChartLine } from '@fortawesome/free-solid-svg-icons';

@Component({
  selector: 'app-algoritmo',
  templateUrl: './algoritmo.component.html',
  styleUrls: ['./algoritmo.component.css']
})
export class AlgoritmoComponent implements OnInit {
  public modelos;
  idAlgoritmo: number;
  faTools = faTools;
  faChartLine = faChartLine;
  faQuestion = faQuestion;

  constructor(
    private predictionService: PredictionService,
    private loginService: LoginService) { }

  ngOnInit(): void {
    this.obtenModelos()
  }

  ngAfterViewInit() {

  }

  obtenModelos() {
    this.predictionService.getModel(this.loginService.getToken()).subscribe(
      response => {
        // console.log(response);
        this.modelos = response;
        let index = 1;
        this.modelos.forEach(element => {
          // console.log(element);
          element.index = index++;
          switch (element.name) {
            case "NaiveBayes":
              element.pill = "Naive Bayes"
              element.pillId = "pills-nv"
              element.selected = "false"
              element.title = "Naive Bayes"
              element.description = "Naive Bayes uses a simple implementation of Bayes Theorem(hence naive) where the prior probability for each class is calculated from the training data and assumed to be independent of each other(technically called conditionally independent)."
              element.linkmodelo = "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html"
              break;
            case "Tree":
              element.pill = "J-48"
              element.pillId = "pills-j48"
              element.selected = "false"
              element.title = "J-48"
              element.description = "It is an algorithm to generate a decision tree that is generated by C4.5(an extension of ID3). It is also known as a statistical classifier.For decision tree classification, we need a database."
              element.linkmodelo = "https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html"
              break;
            case "RandomForest":
              element.pill = "Random Forest"
              element.pillId = "pills-rf"
              element.selected = "false"
              element.title = "Random Forest"
              element.description = "Random Forest is an improvement upon bagged decision trees that disrupts the greedy splitting algorithm during tree creation so that split points can only be selected from a random subset of the input attributes.This simple change can have a big effect decreasing the similarity between the bagged trees and in turn the resulting predictions."
              element.linkmodelo = "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html"
              break;
            case "ANN":
              element.pill = "ANN"
              element.pillId = "pills-ann"
              element.selected = "true"
              element.title = "ANN (Artificial Neuronal Network)"
              element.description = "A neural network is a simplified model that emulates the way the human brain processes information: It works by simultaneously combining a large number of interconnected processing units that look like abstract versions of neurons."
              element.linkmodelo = "https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html"
              break;
            case "SVM":
              element.pill = "SVM"
              element.pillId = "pills-svm"
              element.selected = "false"
              element.title = "SVM (Support Vector Machine)"
              element.description = "SVM work by finding a line that best separates the data into the two groups. This is done using an optimization process that only considers those data instances in the training dataset that are closest to the line that best separates the classes.The instances are called support vectors, hence the name of the technique."
              element.linkmodelo = "https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html"
              break;
          }
        });

        this.modelos.sort((a, b) => a.pill > b.pill ? 1 : -1)
        console.log(this.modelos);

      },
      error => {
        console.log(error);
      }
    )
  }

}
